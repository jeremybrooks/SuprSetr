/*
 *  SuprSetr is Copyright 2010-2020 by Jeremy Brooks
 *
 *  This file is part of SuprSetr.
 *
 *   SuprSetr is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SuprSetr is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SuprSetr.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.jeremybrooks.suprsetr;

import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputListener;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;

/**
 * BlockerPanel should be used as a GlassPane to block user input during long
 * operations, and provide feedback to the user.
 *
 * @author Jeremy Brooks
 */
public class BlockerPanel extends JPanel implements MouseInputListener, KeyListener {

	private static final long serialVersionUID = 6644288982323470368L;
	/**
	 * The width of the frame we are blocking.
	 */
	private int frameWidth;

	/**
	 * The height of the frame we are blocking.
	 */
	private int frameHeight;

	/**
	 * Used to save the cursor state when blocking.
	 */
	private Cursor oldCursor;


	/**
	 * No public default constructor available.
	 */
	private BlockerPanel() {
	}


	/**
	 * Create a new BlockerPanel.
	 *
	 * @param c     the component that will be blocked.
	 * @param title the text to display at the top of the blocker panel.
	 */
	public BlockerPanel(Component c, String title) {
		this.frameWidth = c.getWidth();
		this.frameHeight = c.getHeight();
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
		initComponents();

		this.lblTitle.setText(title);

		// center the spinner
		lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
		lblSpinner.setHorizontalAlignment(SwingConstants.CENTER);
		// center the internal opaque panel
		int width = frameWidth - 40;
		int height = 90;
		jPanel1.setBounds((frameWidth - width) / 2, (frameHeight - height) / 2, width, height);

	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		lblTitle = new javax.swing.JLabel();
		lblSpinner = new javax.swing.JLabel();
		lblMessage = new javax.swing.JLabel();

		setOpaque(false);
		setLayout(null);

		jPanel1.setBackground(javax.swing.UIManager.getDefaults().getColor("window"));
		jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
		jPanel1.setLayout(new java.awt.BorderLayout());

		lblTitle.setFont(new java.awt.Font("Lucida Grande", Font.PLAIN, 13));
		lblTitle.setText("jLabel1");
		jPanel1.add(lblTitle, java.awt.BorderLayout.NORTH);

		lblSpinner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/29-1.gif"))); // NOI18N
		jPanel1.add(lblSpinner, java.awt.BorderLayout.CENTER);

		lblMessage.setText("jLabel1");
		jPanel1.add(lblMessage, java.awt.BorderLayout.SOUTH);

		add(jPanel1);
		jPanel1.setBounds(50, 120, 280, 90);
	}

	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel lblMessage;
	private javax.swing.JLabel lblSpinner;
	private javax.swing.JLabel lblTitle;


	/**
	 * Show wait cursor, display a message, and show the blocker panel.
	 *
	 * @param message message to be displayed.
	 */
	public void block(String message) {
		MainWindow.getMainWindow().enableFilter(false);

		if (message == null) {
			message = "";
		}
		this.oldCursor = this.getCursor();
		this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		// Position the spinner and the message label
		lblSpinner.setLocation(this.frameWidth / 2 - lblSpinner.getWidth() / 2, this.frameHeight / 2 - lblSpinner.getHeight() / 2);
		lblMessage.setBounds(5, lblSpinner.getY() + 50, this.frameWidth - 10, 16);
		lblMessage.setHorizontalAlignment(SwingConstants.CENTER);
		lblMessage.setText(message);

		// Show the blocker
    MainWindow.setBlocked(true);
		this.setVisible(true);
	}


	/**
	 * Restore the cursor and hide the blocker panel.
	 */
	public void unBlock() {
    MainWindow.setBlocked(false);
		this.setCursor(this.oldCursor);
		this.setVisible(false);
		MainWindow.getMainWindow().enableFilter(true);
	}


	/**
	 * Set the title of the blocker panel.
	 *
	 * @param title text to use as the title.
	 */
	public void setTitle(String title) {
		SwingUtilities.invokeLater(new MessageUpdater(null, title));
	}


	/**
	 * Update the message.
	 *
	 * @param message message to be displayed.
	 */
	public void updateMessage(String message) {
		SwingUtilities.invokeLater(new MessageUpdater(message, null));
	}


	/**
	 * Class to update the displayed message.
	 *
	 * <p>An instance of this class should be scheduled on the EventDispatch
	 * thread in order to avoid blocking the application.</p>
	 */
	class MessageUpdater implements Runnable {

		/**
		 * The message to display.
		 */
		private String message;

		/**
		 * The title text.
		 */
		private String title;

		/**
		 * Private to force user to specify a message.
		 */
		private MessageUpdater() {
		}

		/**
		 * Create an instance of MessageUpdater.
		 *
		 * @param message the message to display.
		 * @param title   the title text to display.
		 */
		public MessageUpdater(String message, String title) {
			this.message = message;
			this.title = title;
		}

		/**
		 * Do the actual work of updating the message and title.
		 * This will be executed on the EventDispatch thread.
		 */
		@Override
		public void run() {
			if (this.message != null) {
				lblMessage.setText(this.message);
			}
			if (this.title != null) {
				lblTitle.setText(this.title);
			}
		}
	}


	// Implement mouse and key listener interfaces.
	// Beep when the user clicks the blocked window.
	// NOTE: It is a known issue that the glass pane does not intercept keyboard
	//       events unless it has the focus. This is a possible detail to be
	//       implemented in the future.
	@Override
	public void mouseMoved(MouseEvent e) {
	}

	@Override
	public void mouseDragged(MouseEvent e) {
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mousePressed(MouseEvent e) {
		Toolkit.getDefaultToolkit().beep();
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	@Override
	public void keyPressed(KeyEvent e) {

	}

	@Override
	public void keyReleased(KeyEvent e) {

	}
}
